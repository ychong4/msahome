# Generated by Django 3.1.2 on 2020-11-13 01:28

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Field',
            fields=[
                ('field_ID', models.CharField(default=' ', max_length=10, primary_key=True, serialize=False)),
                ('field_name', models.CharField(default='', max_length=50, null=True)),
                ('field_address', models.CharField(default='', max_length=100, null=True)),
                ('field_city', models.CharField(default='', max_length=50, null=True)),
                ('field_state', models.CharField(default='', max_length=50, null=True)),
                ('field_zip', models.CharField(blank=True, default='00000', max_length=50, null=True)),
                ('field_owner_org', models.CharField(blank=True, default=' ', max_length=50, null=True)),
                ('field_contact_name', models.CharField(default='', max_length=50, null=True)),
                ('field_contact_email', models.EmailField(default=' ', max_length=100)),
                ('field_contact_phone', models.CharField(default='(402)000-0000', max_length=50)),
                ('field_notes', models.CharField(blank=True, default=' ', max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('match_ID', models.CharField(default=' ', max_length=10, primary_key=True, serialize=False)),
                ('time', models.TimeField()),
                ('date', models.DateField()),
                ('home_team_score', models.CharField(default='0', max_length=50)),
                ('guest_team_score', models.CharField(default='0', max_length=50)),
                ('referee_comment', models.CharField(default='N/A', max_length=200)),
                ('field_name', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='field', to='msahomeapp.field')),
            ],
        ),
        migrations.CreateModel(
            name='Referee',
            fields=[
                ('referee_ID', models.CharField(default=' ', max_length=10, primary_key=True, serialize=False)),
                ('last_name', models.CharField(default='', max_length=50, null=True)),
                ('first_name', models.CharField(default='', max_length=50, null=True)),
                ('address', models.CharField(default='', max_length=100, null=True)),
                ('city', models.CharField(default='', max_length=50, null=True)),
                ('state', models.CharField(default='', max_length=50, null=True)),
                ('zip', models.CharField(blank=True, default='00000', max_length=50, null=True)),
                ('email', models.EmailField(default=' ', max_length=100)),
                ('phone', models.CharField(default='(402)000-0000', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('school_ID', models.CharField(default=' ', max_length=10, primary_key=True, serialize=False)),
                ('school_name', models.CharField(default='', max_length=50, null=True)),
                ('school_street_address', models.CharField(default='', max_length=100, null=True)),
                ('school_city', models.CharField(default='', max_length=50, null=True)),
                ('school_state', models.CharField(default='', max_length=50, null=True)),
                ('school_zip', models.CharField(blank=True, default='00000', max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('tournament_ID', models.CharField(default=' ', max_length=10, primary_key=True, serialize=False)),
                ('tournament_name', models.CharField(default='', max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('team_ID', models.CharField(default=' ', max_length=10, primary_key=True, serialize=False)),
                ('team_name', models.CharField(default='', max_length=50, null=True)),
                ('team_coach', models.CharField(default='', max_length=50, null=True)),
                ('team_coach_email', models.EmailField(default=' ', max_length=100)),
                ('team_coach_contact', models.CharField(default='(402)000-0000', max_length=50)),
                ('school_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='school', to='msahomeapp.school')),
            ],
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('score_ID', models.CharField(default=' ', max_length=10, primary_key=True, serialize=False)),
                ('guest_team_score', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='guest_score', to='msahomeapp.match')),
                ('home_team_score', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='home_score', to='msahomeapp.match')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('player_ID', models.CharField(default=' ', max_length=10, primary_key=True, serialize=False)),
                ('player_last_name', models.CharField(default='', max_length=50, null=True)),
                ('player_first_name', models.CharField(default='', max_length=50, null=True)),
                ('player_address', models.CharField(default='', max_length=100, null=True)),
                ('player_city', models.CharField(default='', max_length=50, null=True)),
                ('player_state', models.CharField(default='', max_length=50, null=True)),
                ('player_zip', models.CharField(blank=True, default='00000', max_length=50, null=True)),
                ('player_email', models.EmailField(default=' ', max_length=100)),
                ('player_phone', models.CharField(default='(402)000-0000', max_length=50)),
                ('eligibility_status', models.BooleanField(default=True)),
                ('player_school_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='School', to='msahomeapp.school')),
                ('player_team_ID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Team', to='msahomeapp.team')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='guest_team_ID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Guest_Team', to='msahomeapp.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='home_team_ID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Home_Team', to='msahomeapp.team'),
        ),
        migrations.AddField(
            model_name='match',
            name='match_referee_ID',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='Referee', to='msahomeapp.referee'),
        ),
        migrations.AddField(
            model_name='match',
            name='match_tournament_ID',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='Tournament', to='msahomeapp.tournament'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_name', models.CharField(default='', max_length=50, null=True)),
                ('first_name', models.CharField(default='', max_length=50, null=True)),
                ('address', models.CharField(default='-', max_length=100, null=True)),
                ('city', models.CharField(default='-', max_length=50, null=True)),
                ('state', models.CharField(default='-', max_length=50, null=True)),
                ('zip', models.CharField(blank=True, default='00000', max_length=50, null=True)),
                ('email', models.EmailField(default=' ', max_length=100)),
                ('phone', models.CharField(default='(402)000-0000', max_length=50)),
                ('referee_id', models.CharField(default='-', max_length=10)),
                ('team_id', models.CharField(default='-', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
